/*
 *  matiec - a compiler for the programming languages defined in IEC 61131-3
 *
 *  Copyright (C) 2021  Mario de Sousa (msousa@fe.up.pt)
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *
 * This code is made available on the understanding that it will not be
 * used in safety-critical situations without a full and competent review.
 */

/*
 * An IEC 61131-3 compiler.
 *
 * Based on the
 * FINAL DRAFT - IEC 61131-3, 2nd Ed. (2001-12-10)
 *
 */


/*
 * Code to be included into the code generated by the 4th stage.
 *
 * This is part of the 4th stage that generates
 * a summary of the call graph in JSON format.
 * This is file is to be used by ...
 */





// #include <stdio.h>  /* required for NULL */
#include <string>
#include <iostream>
#include <sstream>
#include <typeinfo>
#include "generate_json.hh"

#include "../stage4.hh"
#include "../../main.hh" // required for ERROR() and ERROR_MSG() macros.



/***********************************************************************/
/***********************************************************************/
/***********************************************************************/
/***********************************************************************/

/* Parse command line options passed from main.c !! */

int  stage4_parse_options(char *options) {return 0;}

void stage4_print_options(void) {
  printf("          (no options available when generating JSON summary of 61131-3 code)\n"); 
}


/***********************************************************************/
/***********************************************************************/
/***********************************************************************/
/***********************************************************************/


class generate_operation_c: public iterator_visitor_c {
//class generate_operation_c: public visitor_c {
  private:
    stage4out_c &s4o;

    
void *print_token(symbol_c *token) {
  return s4o.print(token->token->value);
}

    
void *print_operation(symbol_c *name,
                      symbol_c *returns) {
  s4o.print(s4o.indent_spaces + "{\n");
  s4o.indent_right();

    s4o.print(s4o.indent_spaces + "\"operation\": {\n");
    s4o.indent_right();

      // "name": "<string>",
      s4o.print(s4o.indent_spaces + "\"name\": \"");
      print_token(name);
      s4o.print("\",\n");
    
      // "returns": "<datatype>",
      if (nullptr != returns) {
        s4o.print(s4o.indent_spaces + "\"returns\": \"");
        returns->accept(*this);
        s4o.print("\",\n");
      }
  
      // "args": [
      //    "<datatype>"
      //  ],
      s4o.print(s4o.indent_spaces + "\"args\": [\n");
      s4o.indent_right();
      // visit...
      s4o.indent_left();    
      s4o.print(s4o.indent_spaces + "],\n");

      // "creates": [
      //    "<datatype>"
      //  ],
      s4o.print(s4o.indent_spaces + "\"creates\": [\n");
      s4o.indent_right();
      // visit...
      s4o.indent_left();    
      s4o.print(s4o.indent_spaces + "],\n");

      // "destroys": [
      //    "<datatype>"
      //  ],
      s4o.print(s4o.indent_spaces + "\"destroys\": [\n");
      s4o.indent_right();
      // visit...
      s4o.indent_left();    
      s4o.print(s4o.indent_spaces + "],\n");
      
      // "calls": [
      //    "<operation>"
      //  ],
      s4o.print(s4o.indent_spaces + "\"calls\": [\n");
      s4o.indent_right();
      // visit...
      s4o.indent_left();    
      s4o.print(s4o.indent_spaces + "],\n");
      
      // "uses": [
      //    "<data>"
      //  ],
      s4o.print(s4o.indent_spaces + "\"uses\": [\n");
      s4o.indent_right();
      // visit...
      s4o.indent_left();    
      s4o.print(s4o.indent_spaces + "],\n");
      
      // "hints": {
      //    XXX
      //  },
      s4o.print(s4o.indent_spaces + "\"hints\": {\n");
      s4o.indent_right();
      // visit...
      s4o.indent_left();    
      s4o.print(s4o.indent_spaces + "},\n");
      
    s4o.indent_left();    
    s4o.print(s4o.indent_spaces + "}\n");  // "operation":

  s4o.indent_left();    
  s4o.print(s4o.indent_spaces + "}\n");
  
  return NULL;
}
    
    
  public:
    generate_operation_c(stage4out_c *s4o_ptr): s4o(*s4o_ptr) {}
    ~generate_operation_c(void) {}

    



/***********************/
/* B 1.5.1 - Functions */
/***********************/
void *visit(function_declaration_c *symbol) {
  return print_operation(symbol->derived_function_name, symbol->type_name);
}


/*****************************/
/* B 1.5.2 - Function Blocks */
/*****************************/
/*  FUNCTION_BLOCK derived_function_block_name io_OR_other_var_declarations function_block_body END_FUNCTION_BLOCK */
void *visit(function_block_declaration_c *symbol) {
  return print_operation(symbol->fblock_name, NULL);
}


/**********************/
/* B 1.5.3 - Programs */
/**********************/
/*  PROGRAM program_type_name program_var_declarations_list function_block_body END_PROGRAM */
void *visit(program_declaration_c *symbol) {
  return print_operation(symbol->program_type_name, NULL);
}




}; /* class generate_operation_c */



/***********************************************************************/
/***********************************************************************/
/***********************************************************************/
/***********************************************************************/


class generate_json_c: public null_visitor_c {
  private:
    stage4out_c &s4o;


  public:
    generate_json_c(stage4out_c *s4o_ptr): s4o(*s4o_ptr) {}
    ~generate_json_c(void) {}



/***************************/
/* B 0 - Programming Model */
/***************************/
void *visit(library_c *symbol) {
  generate_operation_c generate_operation(&s4o);
  
  s4o.print(s4o.indent_spaces + "[\n");
  s4o.indent_right();
  symbol->accept(generate_operation);
  s4o.indent_left();    
  s4o.print(s4o.indent_spaces + "]\n");
  
  return NULL;
}


}; /* class generate_json_c */



/***********************************************************************/
/***********************************************************************/
/***********************************************************************/
/***********************************************************************/
/***********************************************************************/
/***********************************************************************/
/***********************************************************************/
/***********************************************************************/




visitor_c *new_code_generator(stage4out_c *s4o, const char *builddir)  {return new generate_json_c(s4o);}
void delete_code_generator(visitor_c *code_generator) {delete code_generator;}















